<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BoardService">
    <select id="getPostSearchList" resultType="ListResponseDTO">
        SELECT POST_INDEX, BOARD_NAME AS BOARD_TITLE, POST_TITLE,
            USER_NICKNAME AS POST_AUTHOR, POST_CREATED_DATE AS POST_DATE,
            POST_VIEWS AS POST_VIEW, POST_UPVOTES
        FROM POST_INFO_TB P, USER_INFO_TB U, BOARD_LIST_TB B
        WHERE P.POST_AUTHOR_INDEX = U.USER_INDEX
            <if test="boardIndex != 0">
                AND P.BOARD_INDEX = #{boardIndex}
            </if>
            AND P.BOARD_INDEX = B.BOARD_INDEX
            <choose>
                <when test="searchType.getValue() == 'title'">
                    AND P.POST_TITLE LIKE CONCAT('%',#{searchKeyword},'%')
                </when>
                <when test="searchType.getValue() == 'author'">
                    AND U.USER_NICKNAME LIKE CONCAT('%',#{searchKeyword},'%')
                </when>
                <when test="searchType.getValue() == 'title_author'">
                    AND (P.POST_TITLE LIKE CONCAT('%',#{searchKeyword},'%') OR U.USER_NICKNAME LIKE CONCAT('%',#{searchKeyword},'%'))
                </when>
                <otherwise>
                </otherwise>
            </choose>
        <choose>
            <when test="sortType.getValue() == 'latest'">
                ORDER BY POST_CREATED_DATE DESC, POST_INDEX DESC
            </when>
            <when test="sortType.getValue()  == 'past'">
                ORDER BY POST_CREATED_DATE ASC, POST_INDEX DESC
            </when>
            <when test="sortType.getValue()  == 'upvote'">
                ORDER BY POST_UPVOTES DESC, POST_INDEX DESC
            </when>
            <otherwise>
                ORDER BY POST_CREATED_DATE DESC, POST_INDEX DESC
            </otherwise>
        </choose>
        LIMIT #{startIndex}, #{endIndex};
    </select>

    <select id="getPostCount" resultType="int">
        SELECT count(*)
        FROM POST_INFO_TB P, USER_INFO_TB U, BOARD_LIST_TB B
        WHERE P.BOARD_INDEX = B.BOARD_INDEX and P.POST_AUTHOR_INDEX = U.USER_INDEX
        <if test="boardIndex != 0">
            AND P.BOARD_INDEX = #{boardIndex}
        </if>
        <choose>
            <when test="searchType.getValue() == 'title'">
                AND P.POST_TITLE LIKE CONCAT('%',#{searchKeyword},'%')
            </when>
            <when test="searchType.getValue() == 'author'">
                AND U.USER_NICKNAME LIKE CONCAT('%',#{searchKeyword},'%')
            </when>
            <when test="searchType.getValue() == 'title_author'">
                AND (P.POST_TITLE LIKE CONCAT('%',#{searchKeyword},'%') OR U.USER_NICKNAME LIKE CONCAT('%',#{searchKeyword},'%'))
            </when>
        </choose>

    </select>


    <select id="getPost" resultType="ViewResponseDTO">
        SELECT BOARD_NAME AS BOARD_TITLE, POST_TITLE, USER_NICKNAME AS POST_AUTHOR, POST_CREATED_DATE AS POST_DATE,
            POST_VIEWS AS POST_VIEW, POST_UPVOTES, POST_DOWNVOTES, POST_CONTENT
        FROM POST_INFO_TB P, USER_INFO_TB U, BOARD_LIST_TB B
        WHERE P.POST_AUTHOR_INDEX = U.USER_INDEX
            AND P.BOARD_INDEX = B.BOARD_INDEX
            AND P.POST_INDEX = #{postIndex};
    </select>
    <update id="updatePostView" parameterType="ViewDTO">
        UPDATE POST_INFO_TB
        SET POST_VIEWS = POST_VIEWS + 1
        WHERE POST_INDEX = #{postIndex};
    </update>
    <insert id="writePost" parameterType="WriteDTO">
        INSERT INTO POST_INFO_TB(BOARD_INDEX, POST_TITLE, POST_CONTENT, POST_AUTHOR_INDEX)
        VALUES(#{boardIndex}, #{title}, #{content}, (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID}));
    </insert>
    <update id="modifyPost" parameterType="ModifyDTO">
        UPDATE POST_INFO_TB
        SET POST_TITLE = #{title}, POST_CONTENT = #{content}
        WHERE POST_INDEX = #{postIndex}
            AND POST_AUTHOR_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID})
            AND BOARD_INDEX = #{boardIndex};
    </update>
    <delete id="deletePost" parameterType="DeleteDTO">
        DELETE FROM POST_VOTE_TB
        WHERE POST_INDEX = #{postIndex};
        DELETE FROM COMMENT_VOTE_TB
        WHERE POST_INDEX = #{postIndex};
        DELETE FROM COMMENT_INFO_TB
        WHERE POST_INDEX = #{postIndex};
        DELETE FROM POST_INFO_TB
        WHERE POST_INDEX = #{postIndex}
            AND POST_AUTHOR_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID});
    </delete>
    <select id="checkVote" resultType="String">
        SELECT POST_VOTE_CHECK FROM POST_VOTE_TB
        WHERE POST_INDEX = #{postIndex}
            AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID});
    </select>
    <update id="updateUpvotePost" parameterType="VoteDTO">
        UPDATE POST_VOTE_TB
        SET POST_VOTE_CHECK = "up"
        WHERE POST_INDEX = #{postIndex}
            AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID});
        UPDATE POST_INFO_TB
        SET POST_UPVOTES = POST_UPVOTES + 1
        , POST_DOWNVOTES = POST_DOWNVOTES - 1
        WHERE POST_INDEX = #{postIndex};
    </update>
    <insert id="insertUpvotePost" parameterType="VoteDTO">
        INSERT INTO POST_VOTE_TB(POST_INDEX, USER_INDEX, POST_VOTE_CHECK)
        VALUES(#{postIndex}, (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID}), "up");
        UPDATE POST_INFO_TB
        SET POST_UPVOTES = POST_UPVOTES + 1
        WHERE POST_INDEX = #{postIndex};
    </insert>
    <update id="updateDownvotePost" parameterType="VoteDTO">
        UPDATE POST_VOTE_TB
        SET POST_VOTE_CHECK = "down"
        WHERE POST_INDEX = #{postIndex}
            AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID});
        UPDATE POST_INFO_TB
        SET POST_UPVOTES = POST_UPVOTES - 1
        , POST_DOWNVOTES = POST_DOWNVOTES + 1
        WHERE POST_INDEX = #{postIndex};
    </update>
    <insert id="insertDownvotePost" parameterType="VoteDTO">
        INSERT INTO POST_VOTE_TB(POST_INDEX, USER_INDEX, POST_VOTE_CHECK)
        VALUES(#{postIndex}, (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID}), "down");
        UPDATE POST_INFO_TB
        SET POST_DOWNVOTES = POST_DOWNVOTES + 1
        WHERE POST_INDEX = #{postIndex};
    </insert>
    <select id="getCommentList" resultType="CommentListResponseDTO">
        SELECT COMMENT_INDEX, COMMENT_CONTENT, COMMENT_CREATED_DATE AS COMMENT_DATE,
        USER_NICKNAME AS COMMENT_WRITER, COMMENT_UPVOTES AS COMMENT_UPVOTE, COMMENT_DOWNVOTES AS COMMENT_DOWNVOTE, COMMENT_RATING
        FROM COMMENT_INFO_TB C, USER_INFO_TB U
        WHERE C.COMMENT_AUTHOR_INDEX = U.USER_INDEX
            AND C.POST_INDEX = #{postIndex}
        <choose>
            <when test="sortType.getValue() == 'date'">
                ORDER BY COMMENT_CREATED_DATE DESC
            </when>
            <when test="sortType.getValue()  == 'upvote'">
                ORDER BY COMMENT_UPVOTES DESC
            </when>
            <when test="sortType.getValue()  == 'downvote'">
                ORDER BY COMMENT_DOWNVOTES DESC
            </when>
            <when test="sortType.getValue()  == 'rating'">
                ORDER BY COMMENT_RATING DESC
            </when>
            <otherwise>
                ORDER BY COMMENT_CREATED_DATE DESC
            </otherwise>
        </choose>
        LIMIT #{startIndex}, #{endIndex};
    </select>
    <insert id="writeComment" parameterType="CommentWriteDTO">
        INSERT INTO COMMENT_INFO_TB(POST_INDEX, COMMENT_CONTENT, COMMENT_AUTHOR_INDEX)
        VALUES(#{postIndex}, #{commentContent}, (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID}));
    </insert>
    <update id="modifyComment" parameterType="CommentModifyDTO">
        UPDATE COMMENT_INFO_TB
        SET COMMENT_CONTENT = #{commentContent}
        WHERE COMMENT_INDEX = #{commentIndex}
            AND COMMENT_AUTHOR_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID})
            AND POST_INDEX = #{postIndex};
    </update>
    <delete id="deleteCommentVote" parameterType="CommentDeleteDTO">
        DELETE FROM COMMENT_VOTE_TB
        WHERE COMMENT_INDEX = #{commentIndex}
          AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID})
          AND POST_INDEX = #{postIndex};
    </delete>
    <delete id="deleteComment" parameterType="CommentDeleteDTO">
        DELETE FROM COMMENT_INFO_TB
        WHERE COMMENT_INDEX = #{commentIndex}
            AND COMMENT_AUTHOR_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID})
            AND POST_INDEX = #{postIndex};
    </delete>
    <select id="checkCommentVote" resultType="String">
        SELECT COMMENT_VOTE_CHECK FROM COMMENT_VOTE_TB
        WHERE COMMENT_INDEX = #{commentIndex}
            AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID})
            AND POST_INDEX = #{postIndex};
    </select>
    <update id="updateUpvoteComment" parameterType="CommentVoteDTO">
        UPDATE COMMENT_VOTE_TB
        SET COMMENT_VOTE_CHECK = "up"
        WHERE COMMENT_INDEX = #{commentIndex}
            AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID})
            AND POST_INDEX = #{postIndex};
        UPDATE COMMENT_INFO_TB
        SET COMMENT_UPVOTES = COMMENT_UPVOTES + 1
        , COMMENT_DOWNVOTES = COMMENT_DOWNVOTES - 1
        WHERE COMMENT_INDEX = #{commentIndex}
            AND POST_INDEX = #{postIndex};
    </update>
    <insert id="insertUpvoteComment" parameterType="CommentVoteDTO">
        INSERT INTO COMMENT_VOTE_TB(COMMENT_INDEX, USER_INDEX, COMMENT_VOTE_CHECK, POST_INDEX)
        VALUES(#{commentIndex}, (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID}), "up", #{postIndex});
        UPDATE COMMENT_INFO_TB
        SET COMMENT_UPVOTES = COMMENT_UPVOTES + 1
        WHERE COMMENT_INDEX = #{commentIndex}
            AND POST_INDEX = #{postIndex};
    </insert>
    <update id="updateDownvoteComment" parameterType="CommentVoteDTO">
        UPDATE COMMENT_VOTE_TB
        SET COMMENT_VOTE_CHECK = "down"
        WHERE COMMENT_INDEX = #{commentIndex}
            AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID})
            AND POST_INDEX = #{postIndex};
        UPDATE COMMENT_INFO_TB
        SET COMMENT_UPVOTES = COMMENT_UPVOTES - 1
        , COMMENT_DOWNVOTES = COMMENT_DOWNVOTES + 1
        WHERE COMMENT_INDEX = #{commentIndex}
            AND POST_INDEX = #{postIndex};
    </update>
    <insert id="insertDownvoteComment" parameterType="CommentVoteDTO">
        INSERT INTO COMMENT_VOTE_TB(COMMENT_INDEX, USER_INDEX, COMMENT_VOTE_CHECK, POST_INDEX)
        VALUES(#{commentIndex}, (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID}), "down", #{postIndex});
        UPDATE COMMENT_INFO_TB
        SET COMMENT_DOWNVOTES = COMMENT_DOWNVOTES + 1
        WHERE COMMENT_INDEX = #{commentIndex}
            AND POST_INDEX = #{postIndex};
    </insert>

    <!-- 현재 보고있는 게시판의 다음 postIndex 불러오는 쿼리 -->
    <!-- boardIndex
        1 = 자유게시판
        2 = 튜터링
        3 = 공지사항-->
    <select id="getNextPost" resultType="int">
        SELECT POST_INDEX
        FROM POST_INFO_TB
        WHERE
            <if test="boardIndex != 0">
                BOARD_INDEX = #{boardIndex}
                AND
            </if>
            POST_INDEX &gt; #{postIndex}
        ORDER BY POST_INDEX ASC
        LIMIT 1;
    </select>

    <!-- 현재 보고있는 게시판의 이전 postIndex 불러오는 쿼리 -->
    <select id="getPrevPost" resultType="int">
        SELECT POST_INDEX
        FROM POST_INFO_TB
        WHERE
            <if test="boardIndex != 0">
                BOARD_INDEX = #{boardIndex}
                AND
            </if>
            POST_INDEX &lt; #{postIndex}
        ORDER BY POST_INDEX DESC
        LIMIT 1;
    </select>

    <!-- 게시글 조회수 상승 -->
    <update id="viewCountUp" parameterType="ViewDTO">
        UPDATE POST_INFO_TB
        SET POST_VIEWS = POST_VIEWS + 1
        WHERE POST_INDEX = #{postIndex};
    </update>

    <select id="getCommentCount" resultType="int">
        SELECT COUNT(*) FROM COMMENT_INFO_TB
        WHERE POST_INDEX = #{postIndex};
    </select>

    <!-- 튜터링 게시판 리스트 불러오기 -->
    <select id="getTutoringList" resultType="TutoringPostVO" parameterType="TutoringListDTO">
        SELECT *
        FROM POST_TUTORING_INFO_VIEW
        WHERE 1 = 1
        <choose>
            <when test="keyword != ''">
                AND POST_TUTORING_TITLE LIKE CONCAT('%',#{keyword},'%') or AUTHOR_NICKNAME LIKE CONCAT('%',#{keyword},'%')
            </when>
            <when test="subject.length != 0">
                AND
                <foreach collection="subject" item="item" index="index" separator="OR">
                    GAME_CATEGORIES LIKE CONCAT('%',#{item},'%')
                </foreach>
            </when>
            <otherwise>
                ;
            </otherwise>
        </choose>
    </select>

    <!-- 튜터링 게시물 작성하기 -->
    <insert id="writeTutoring" parameterType="TutoringWriteDTO">
        INSERT INTO POST_TUTORING_INFO_TB(POST_TUTORING_AUTHOR_INDEX, POST_TUTORING_TITLE, POST_TUTORING_CONTENT, POST_TUTORING_MAX_USER_COUNT, POST_TUTORING_USER_COUNT)
        VALUES(
               (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID}),
               #{postTutoringTitle}, #{postTutoringContent},
               #{postTutoringMaxUserCount}, #{postTutoringUserCount}
        );

        <selectKey keyProperty="postTutoringIndex" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID() as postTutoringIndex;
        </selectKey>
    </insert>

    <insert id="insertTutoringCategory" parameterType="TutoringWriteDTO">
        INSERT INTO TUTORING_CATEGORY_LINK_TB(POST_TUTORING_INDEX, GAME_CATEGORY_ID)
        VALUES
            <foreach collection="postTutoringCategory" item="item" index="index" separator=",">
                (#{postTutoringIndex}, (SELECT GAME_CATEGORY_ID FROM GAME_CATEGORY_TB WHERE GAME_CATEGORY_NAME = #{item}))
            </foreach>
        ;
    </insert>

    <insert id="insertTutoringTag" parameterType="TutoringWriteDTO">
        INSERT INTO TUTORING_TAG_LINK_TB(POST_TUTORING_INDEX, TAG_INDEX)
        VALUES
            <foreach collection="postTutoringTags" item="item" index="index" separator=",">
                (#{postTutoringIndex}, (SELECT TAG_INDEX FROM TAG_TB WHERE TAG_NAME = #{item}))
            </foreach>
        ;
    </insert>

    <!-- 튜터링 게시물 수정하기 -->
    <update id="modifyTutoring" parameterType="TutoringWriteDTO">
        UPDATE POST_TUTORING_INFO_TB
        SET POST_TUTORING_TITLE = #{postTutoringTitle}, POST_TUTORING_CONTENT = #{postTutoringContent}, POST_TUTORING_MAX_USER_COUNT = #{postTutoringMaxUserCount}
        WHERE POST_TUTORING_INDEX = #{postTutoringIndex}
            AND POST_TUTORING_AUTHOR_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID})
    </update>

    <!-- 튜터링 게시물 삭제하기 -->
    <delete id="deleteTutoringCategory" parameterType="TutoringDeleteDTO">
        DELETE FROM TUTORING_CATEGORY_LINK_TB
        WHERE POST_TUTORING_INDEX = #{postIndex};
    </delete>
    <delete id="deleteTutoringTag" parameterType="TutoringDeleteDTO">
        DELETE FROM TUTORING_TAG_LINK_TB
        WHERE POST_TUTORING_INDEX = #{postIndex};
    </delete>
    <delete id="deleteTutoring" parameterType="TutoringDeleteDTO">
        DELETE FROM POST_TUTORING_INFO_TB
        WHERE POST_TUTORING_INDEX = #{postIndex}
            AND POST_TUTORING_AUTHOR_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID});
    </delete>

    <!-- 튜터링 게시물 카테고리/태그 출력    -->
    <select id="getTutoringOrderDataList" resultType="TutoringPostVO">
        SELECT
                (SELECT GROUP_CONCAT(GAME_CATEGORY_NAME) FROM GAME_CATEGORY_TB) AS GAME_CATEGORIES,
                (SELECT GROUP_CONCAT(TAG_NAME) FROM TAG_TB) AS TAGS;
    </select>

    <!-- 튜터링 게시물 신청   -->
    <insert id="insertTutoringEnroll" parameterType="TutoringEnrollRequestDTO">
        INSERT INTO TUTORING_ENROLL_INFO_TB(POST_TUTORING_INDEX, USER_INDEX)
        VALUES(#{postTutoringIndex}, (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID}));
    </insert>

    <!-- 튜터링 게시물 신청 상태 변경 -->
    <update id="updateTutoringEnroll" parameterType="TutoringEnrollRequestDTO">
        UPDATE TUTORING_ENROLL_INFO_TB
        SET ENROLL_STATE = #{enrollState}
        WHERE POST_TUTORING_INDEX = #{postTutoringIndex}
            AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_NICKNAME = #{userNickname});
        UPDATE POST_TUTORING_INFO_TB
        SET POST_TUTORING_USER_COUNT = (SELECT COUNT(*) FROM TUTORING_ENROLL_INFO_TB WHERE POST_TUTORING_INDEX = #{postTutoringIndex} AND ENROLL_STATE = '수락')
        WHERE POST_TUTORING_INDEX = #{postTutoringIndex};
    </update>

    <!-- 튜터링 게시물 신청 리스트 출력 -->
    <select id="getTutoringEnrollList" parameterType="TutoringEnrollRequestDTO" resultType="TutoringEnrollVO">
        SELECT te.POST_TUTORING_INDEX, te.USER_INDEX, ut.USER_NICKNAME, ut.USER_EMAIL, te.ENROLL_CREATED_AT, te.ENROLL_UPDATED_AT, te.ENROLL_STATE
        FROM TUTORING_ENROLL_INFO_TB te, USER_INFO_TB ut
        WHERE te.USER_INDEX = ut.USER_INDEX
            AND POST_TUTORING_INDEX = #{postTutoringIndex};
    </select>

    <!-- 튜터링 게시물 신청 여부 -->
    <select id="checkTutoringEnroll" parameterType="TutoringEnrollRequestDTO" resultType="String">
        SELECT ENROLL_STATE
        FROM TUTORING_ENROLL_INFO_TB
        WHERE POST_TUTORING_INDEX = #{postTutoringIndex}
            <choose>
                <when test="enrollState =='수락' || enrollState =='거절'">
                    AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_NICKNAME = #{userNickname});
                </when>
                <otherwise>
                    AND USER_INDEX = (SELECT USER_INDEX FROM USER_INFO_TB WHERE USER_ID = #{userID});
                </otherwise>
            </choose>
    </select>

</mapper>
