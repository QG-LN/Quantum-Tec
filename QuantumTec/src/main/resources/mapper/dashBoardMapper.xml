<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="DashBoardService">
    <select id="getUserInfo" resultType="UserInfoDTO">
        CALL USER_DETAIL_PD(#{userIndex});
    </select>
    <select id="getUserList" resultType="UserListVO">
        SELECT * FROM USER_DASHBOARD_INFO_VW;
    </select>
    <update id="cancelUserBan" parameterType="UserBanDTO">
        CALL CancelCurrentBan(#{userIndex});
    </update>
    <insert id="insertUserBan" parameterType="UserBanDTO">
        INSERT INTO USER_BAN_CURRENT_TB (USER_INDEX, BAN_REASON, BAN_SCHEDULE)
        VALUES (#{userIndex}, #{banReason}, #{banSchedule});
    </insert>
    <select id="getUserItemList" resultType="UserItemDTO">
        CALL GetUserPaymentSummary(#{userIndex});
    </select>
    <select id="getUserActivityLogDetail" resultType="UserActivityLogDTO">
        CALL GetUserLogs(#{userId});
    </select>
    <select id="updateUserInfo" statementType="CALLABLE" parameterType="UserInfoUpdateDTO">
        {CALL UpdateUserInfo(#{userIndex}, #{userName}, #{userNickname}, #{userGender}, #{userAddress}, #{userAddressDetail}, #{userPostal}, #{userEmail}, #{userBirth}, #{userRole}, #{userMemo}, #{userCash}, #{userFreeCash}, #{update_result, mode=OUT, jdbcType=INTEGER})}
    </select>
    <select id="getGameList" resultType="GameListVO">
        SELECT * FROM GAME_LIST_VW;
    </select>
    <select id="getGameInfo" resultType="GameInfoDTO">
        CALL GetGameInfo(#{gameIndex});
    </select>
    <select id="getGamePaymentList" resultType="GamePaymentListDTO">
        SELECT 
            pi.PAYMENT_INDEX AS PAYMENT_INDEX,
            ui.USER_ID AS USER_ID,
            pi.PAYMENT_AMOUNT AS PAYMENT_AMOUNT,
            pi.PAYMENT_METHOD AS PAYMENT_METHOD,
            pi.PAYMENT_STATUS AS PAYMENT_STATUS,
            pi.PAYMENT_DATE AS PAYMENT_DATE
        FROM 
            PAYMENT_INFO_TB pi
        JOIN 
            USER_INFO_TB ui ON pi.USER_INDEX = ui.USER_INDEX
        WHERE 
            pi.GAME_INDEX = #{gameIndex};
    </select>
    <select id="getGameAccessByTime" resultType="GameTimeVO">
        CALL CalculateGameAccessByHour(#{gameIndex});
    </select>
    <select id="getGameAccessByDay" resultType="GameDateVO">
        CALL CalculateGameAccessByDate(#{gameIndex});
    </select>
    <update id="updateGameInfo" parameterType="GameInfoUpdateDTO">
        <!-- {CALL UpdateGameInfo(#{gameIndex}, #{gameName}, #{gamePrice}, #{gameCategoryId}, #{gamePlatform}, #{gameVersion}, #{gameVersionUpdateDate}, #{gameShortDescription}, #{gameMemo}, #{gameImageLocation}, #{gameDescription}, #{gameDiscountRate}, #{gameDiscountStartDate}, #{gameDiscountEndDate}, #{update_result, mode=OUT, jdbcType=INTEGER})} -->
        <!-- {CALL UpdateGameInfo(#{gameIndex}, #{gameName}, #{gamePrice}, #{gamePlatform}, #{gameVersion}, #{gameVersionUpdateDate}, #{gameShortDescription}, #{gameMemo}, #{gameImageLocation}, #{gameDescription}, #{update_result, mode=OUT, jdbcType=INTEGER})} -->
        UPDATE GAME_INFO_TB
            SET
                GAME_NAME = #{gameName},
                GAME_PRICE = #{gamePrice},
                GAME_PLATFORM = #{gamePlatform},
                GAME_VERSION = #{gameVersion},
                GAME_VERSION_UPDATE_DATE = #{gameVersionUpdateDate},
                GAME_SHORT_DESCRIPTION = #{gameShortDescription},
                GAME_MEMO = #{gameMemo},
                GAME_IMAGE_LOCATION = #{gameImageLocation},
                GAME_DESCRIPTION = #{gameDescription}
            WHERE
                GAME_INDEX = #{gameIndex};
    </update>
    <select id="getGameComment" resultType="GameCommentDTO">
        SELECT 
            ui.USER_ID,
            ui.USER_NAME,
            gc.COMMENT_CONTENT,
            gc.COMMENT_CREATED_DATE,
            gc.COMMENT_UPVOTES,
            gc.COMMENT_DOWNVOTES,
            gc.COMMENT_RATING
        FROM 
            GAME_COMMENT_INFO_TB gc
        INNER JOIN 
            USER_INFO_TB ui ON gc.COMMENT_AUTHOR_INDEX = ui.USER_INDEX
        WHERE 
            gc.GAME_INDEX = #{gameIndex};
    </select>
    <select id="getPaymentList" resultType="PaymentsListDTO">
        SELECT * FROM (
            -- 게임 결제 내역
            SELECT
                p.PAYMENT_INDEX AS paymentIndex,
                CONCAT('Game Purchase - ', g.GAME_NAME) AS paymentName,
                u.USER_ID AS userId,
                p.PAYMENT_METHOD AS paymentMethod,
                p.PAYMENT_DATE AS paymentDate,
                p.PAYMENT_STATUS AS paymentStatus,
                "Game" AS paymentCategory,
                p.PAYMENT_AMOUNT AS paymentPrice,
                p.GAME_INDEX AS paymentItemIndex,
                u.USER_INDEX AS userIndex
            FROM
                PAYMENT_INFO_TB p
            JOIN
                GAME_INFO_TB g ON p.GAME_INDEX = g.GAME_INDEX
            JOIN
                USER_INFO_TB u ON p.USER_INDEX = u.USER_INDEX

            UNION ALL

            -- 아바타 결제 내역
            SELECT
                a.PAYMENT_INDEX AS paymentIndex,
                CONCAT('Avatar Purchase - ', i.ITEM_NAME) AS paymentName,
                u.USER_ID AS userId,
                a.PAYMENT_METHOD AS paymentMethod,
                a.PAYMENT_DATE AS paymentDate,
                a.PAYMENT_STATUS AS paymentStatus,
                "Avatar" AS paymentCategory,
                a.PAYMENT_AMOUNT AS paymentPrice,
                a.ITEM_INDEX AS paymentItemIndex,
                u.USER_INDEX AS userIndex
            FROM
                AVATAR_PAYMENT_HISTORY_TB a
            JOIN
                AVATAR_ITEM_TB i ON a.ITEM_INDEX = i.ITEM_INDEX
            JOIN
                USER_INFO_TB u ON a.USER_INDEX = u.USER_INDEX

            UNION ALL

            -- 캐시 결제 내역
            SELECT
                c.PAYMENT_INDEX AS paymentIndex,
                CONCAT('Cash Purchase - ', c.ORDER_ID) AS paymentName,
                u.USER_ID AS userId,
                c.PAYMENT_METHOD AS paymentMethod,
                c.PAYMENT_DATE AS paymentDate,
                c.PAYMENT_STATUS AS paymentStatus,
                "Cash" AS paymentCategory,
                c.PAYMENT_AMOUNT AS paymentPrice,
                NULL AS paymentItemIndex,
                u.USER_INDEX AS userIndex
            FROM
                CASH_PAYMENT_HISTORY_TB c
            JOIN
                USER_INFO_TB u ON c.USER_INDEX = u.USER_INDEX
        ) AS CombinedPayments
        ORDER BY paymentDate DESC;
    </select>
    <select id="refundCash" statementType="CALLABLE" parameterType="paymentsListDTO">
        {CALL refundCash(#{paymentIndex}, #{paymentStatus}, #{userIndex}, #{paymentPrice}, #{update_result, mode=OUT, jdbcType=INTEGER})}
    </select>
    <select id="cancelRefundCash" statementType="CALLABLE" parameterType="paymentsListDTO">
        {CALL cancelRefundCash(#{paymentIndex}, #{paymentStatus}, #{userIndex}, #{paymentPrice}, #{update_result, mode=OUT, jdbcType=INTEGER})}
    </select>
    <select id="refundGame" statementType="CALLABLE" parameterType="paymentsListDTO">
        {CALL refundGame(#{paymentIndex}, #{paymentStatus}, #{userIndex}, #{paymentPrice}, #{update_result, mode=OUT, jdbcType=INTEGER})}
    </select>
    <select id="cancelRefundGame" statementType="CALLABLE" parameterType="paymentsListDTO">
        {CALL cancelRefundGame(#{paymentIndex}, #{paymentStatus}, #{userIndex}, #{paymentPrice}, #{update_result, mode=OUT, jdbcType=INTEGER})}
    </select>
    <select id="refundAvatar" statementType="CALLABLE" parameterType="paymentsListDTO">
        {CALL refundAvatar(#{paymentIndex}, #{paymentStatus}, #{userIndex}, #{paymentPrice}, #{paymentItemIndex}, #{update_result, mode=OUT, jdbcType=INTEGER})}
    </select>
    <select id="cancelRefundAvatar" statementType="CALLABLE" parameterType="paymentsListDTO">
        {CALL cancelRefundAvatar(#{paymentIndex}, #{paymentStatus}, #{userIndex}, #{paymentPrice}, #{update_result, mode=OUT, jdbcType=INTEGER})}
    </select>
    <select id="getBoardList" resultType="BoardListDTO">
        SELECT
            p.POST_INDEX,
            b.BOARD_NAME AS BOARD_CATEGORY_NAME,
            p.POST_TITLE,
            u.USER_NAME AS POST_AUTHOR_NAME,
            p.POST_CREATED_DATE,
            p.POST_VIEWS,
            p.POST_UPVOTES,
            p.POST_DOWNVOTES,
            p.POST_AUTHOR_INDEX,
            (SELECT COUNT(*) FROM COMMENT_INFO_TB WHERE POST_INDEX = p.POST_INDEX) AS POST_COMMENTS
        FROM
            POST_INFO_TB p
                INNER JOIN
            BOARD_LIST_TB b ON p.BOARD_INDEX = b.BOARD_INDEX
                INNER JOIN
            USER_INFO_TB u ON p.POST_AUTHOR_INDEX = u.USER_INDEX;
    </select>

    <select id="getCommentList" resultType="CommentListResponseDTO">
        SELECT
            c.COMMENT_INDEX,
            c.COMMENT_CONTENT,
            c.COMMENT_CREATED_DATE AS COMMENT_DATE,
            u.USER_NAME AS COMMENT_WRITER,
            c.COMMENT_UPVOTES,
            c.COMMENT_DOWNVOTES,
            c.COMMENT_RATING
        FROM
            COMMENT_INFO_TB c
                INNER JOIN
            USER_INFO_TB u ON c.COMMENT_AUTHOR_INDEX = u.USER_INDEX
        WHERE
            c.POST_INDEX = #{postIndex};
    </select>

    <select id="getPostModifyLog" resultType="BoardModifyLogDTO">
        SELECT
            OPERATED_BY AS USER_ID,
            JSON_UNQUOTE(JSON_EXTRACT(L.NEW_VALUE, '$.POST_TITLE')) AS POST_TITLE,
            JSON_UNQUOTE(JSON_EXTRACT(L.NEW_VALUE, '$.POST_CONTENT')) AS POST_CONTENT,
            L.TIMESTAMP AS POST_UPDATE_DATE,
            JSON_UNQUOTE(JSON_EXTRACT(L.NEW_VALUE, '$.BOARD_INDEX')) AS BOARD_INDEX
        FROM
            POST_INFO_TB_LOG L
        WHERE
            L.OPERATION_TYPE = 'UPDATE'
          AND JSON_UNQUOTE(JSON_EXTRACT(L.NEW_VALUE, '$.POST_INDEX')) = #{postIndex};
    </select>
</mapper>
